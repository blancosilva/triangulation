(define (get-Vertices super-polygon)
  (let ((vertices (super-polygon-vertices super-polygon)))
    (let loop ((position 0) (Vertices '()))
      (if (= position (vector-length vertices))
	(list->vector Vertices)
	(loop (+ position 1) 
	      (append Vertices
		      (list 
			(point->Vertex 
			  (vector-ref vertices position)))))))))

(define (point->Vertex point)
  (if (equal? (point-name point) 'circumcenter)
      (instantiate Vertex
		   point: (make-Point (point-x point) (point-y point))
		   edges: (list->vector '()))
      (instantiate Boundary-vertex
		   point: (make-Point (point-x point) (point-y point))
		   edges: (list->vector '())
		   boundary-edges: (list->vector '()))))

(define (Vertex-associated-to-point point Vertices)
  (let loop ((position 0))
    (if (= position (vector-length Vertices))
        (error "No vertex associated to point")
	(let ((vertex (vector-ref Vertices position)))
	  (if (and (= (point-x point) (Point-x (Vertex-point vertex)))
		   (= (point-y point) (Point-y (Vertex-point vertex))))
	      vertex
	      (loop (+ position 1)))))))

(define (same-Vertices? vertex-1 vertex-2)
  (let ((point-1 (Vertex-point vertex-1))
	(point-2 (Vertex-point vertex-2)))
    (equal? point-1 point-2)))
	 

(define (Edge-associated-to-Vertices first-vertex second-vertex Edges)
  (let loop ((position 0))
    (if (= position (vector-length Edges))
        (error "No Edge with input vertices")
	(let ((edge (vector-ref Edges position)))
	  (if (or (and (same-Vertices? first-vertex  (Edge-vertex-1 edge))
		       (same-Vertices? second-vertex (Edge-vertex-2 edge)))
		  (and (same-Vertices? first-vertex  (Edge-vertex-2 edge))
		       (same-Vertices? second-vertex (Edge-vertex-1 edge))))
	      edge
	      (loop (+ position 1)))))))
	     
(define (get-Boundary-edges super-polygon)
  (let ((Vertices (get-Vertices super-polygon))
	(segments (super-polygon-segments super-polygon)))
    (let loop ((position 0) (Edges '()))
      (if (= position (vector-length segments))
	  (list Edges Vertices)
	  (let* ((segment (vector-ref segments position))
		 (first-vertex  (Vertex-associated-to-point (car segment) Vertices))
		 (second-vertex (Vertex-associated-to-point (cadr segment) Vertices))
	         (edge (instantiate Boundary-edge vertex-1: first-vertex vertex-2: second-vertex)))
	    (modify (first-vertex Boundary-vertex)
		    edges: (list->vector (append (vector->list (Vertex-edges first-vertex)) (list edge)))
		    boundary-edges: (list->vector (append (vector->list (Boundary-vertex-boundary-edges first-vertex))
							 (list edge))))
	    (modify (second-vertex Boundary-vertex)
		    edges: (list->vector (append (vector->list (Vertex-edges second-vertex)) (list edge)))
		    boundary-edges: (list->vector (append (vector->list (Boundary-vertex-boundary-edges second-vertex))
							  (list edge))))
	    (loop (+ position 1) (append Edges (list edge))))))))

(define (is-element-in-vector? equality-function element items-vector)
  (let loop ((position 0))
    (if (= position (vector-length items-vector))
        (= 0 1)
	(if (equality-function element (vector-ref items-vector position))
	    (= 0 0)
	    (loop (+ position 1))))))

(define (elements-NOT-in-vectors equality-function elements-vector items-vector-1 items-vector-2)
  (let loop ((position 0) (result '()))
    (if (= position (vector-length elements-vector))
        result
	(if (or (is-element-in-vector? equality-function (vector-ref elements-vector position) items-vector-1)
		(is-element-in-vector? equality-function (vector-ref elements-vector position) items-vector-2))
	    (loop (+ position 1) result)
	    (loop (+ position 1) (append result (list (vector-ref elements-vector position))))))))

(define (get-interior-segments super-polygon)
  (let ((segments (super-polygon-segments super-polygon))
	(triangulation (super-polygon-triangulation super-polygon)))
    (let loop ((position 0) (interior-segments '()))
      (if (= position (vector-length triangulation))
	  (list->vector interior-segments)
	  (let ((triangle (vector-ref triangulation position)))
	    (if (is-inner-triangle? triangle segments)
	        (let* ((first-segment  (list (triangle-vertex-1 triangle) (triangle-vertex-2 triangle)))
		       (second-segment (list (triangle-vertex-2 triangle) (triangle-vertex-3 triangle)))
		       (third-segment  (list (triangle-vertex-3 triangle) (triangle-vertex-1 triangle)))
		       (new-edges (elements-NOT-in-vectors same-segments?
		       				           (list->vector (list first-segment second-segment third-segment))
						           segments
							   (list->vector interior-segments)))) 
		  (if (> (length new-edges) 0)
	              (loop (+ position 1) (append interior-segments new-edges))
		      (loop (+ position 1) interior-segments)))
		(loop (+ position 1) interior-segments)))))))

(define (get-Edges super-polygon)
  (let* ((boundary-edges-plus-vertices (get-Boundary-edges super-polygon))
	 (Boundary-edges (car boundary-edges-plus-vertices))
	 (Vertices (cadr boundary-edges-plus-vertices))
	 (interior-segments (get-interior-segments super-polygon)))
    (let loop ((position 0) (result '()))
      (if (= position (vector-length interior-segments))
	  (list Vertices (list->vector (append Boundary-edges result)))
	  (let* ((segment (vector-ref interior-segments position))
		 (first-vertex (Vertex-associated-to-point (car segment) Vertices))
		 (second-vertex (Vertex-associated-to-point (cadr segment) Vertices))
		 (edge (instantiate Edge vertex-1: first-vertex vertex-2: second-vertex)))
	    (modify (first-vertex Vertex)
		    edges: (list->vector (append (vector->list (Vertex-edges first-vertex)) (list edge))))
	    (modify (second-vertex Vertex)
		    edges: (list->vector (append (vector->list (Vertex-edges second-vertex)) (list edge))))
	    (loop (+ position 1) (append result (list edge))))))))

(define (filter filtering-function items-vector)
  (let loop ((position 0) (result '()))
    (if (= position (vector-length items-vector))
        (list->vector result)
	(let ((element (vector-ref items-vector position)))
	  (if (filtering-function element)
	      (loop (+ position 1) (append result (list element)))
	      (loop (+ position 1) result))))))

(define (super-polygon->Triangulation super-polygon)
  (let* ((edges-vertices (get-Edges super-polygon))
	 (Vertices (car edges-vertices))
	 (Edges    (cadr edges-vertices))
	 (segments (super-polygon-segments super-polygon))
	 (triangulation (super-polygon-triangulation super-polygon)))
    (let loop ((position 0) (result '()))
      (if (= position (vector-length triangulation))
	  (instantiate Triangulation
		       vertices:  Vertices
		       edges:     Edges
		       triangles: (list->vector result)
		       has-polygonal-boundary?: #t)
		       ;boundary-vertices: (filter Boundary-vertex? Vertices)
		       ;boundary-edges:    (filter Boundary-edge? Edges))
	  (let ((triangle (vector-ref triangulation position)))
	    (if (is-inner-triangle? triangle segments)
	        (let* ((first-vertex  (Vertex-associated-to-point (triangle-vertex-1 triangle) Vertices))
		       (second-vertex (Vertex-associated-to-point (triangle-vertex-2 triangle) Vertices))
		       (third-vertex  (Vertex-associated-to-point (triangle-vertex-3 triangle) Vertices))
		       (edge-1 (Edge-associated-to-Vertices first-vertex second-vertex Edges))
		       (edge-2 (Edge-associated-to-Vertices second-vertex third-vertex Edges))
		       (edge-3 (Edge-associated-to-Vertices third-vertex first-vertex Edges))
		       (new-Triangle (instantiate Triangle
					          vertex-1: first-vertex
					          vertex-2: second-vertex
					          vertex-3: third-vertex
					          edge-1: edge-1
					          edge-2: edge-2
					          edge-3: edge-3)))
		  (if (Boundary-edge? edge-1)
	              (modify (edge-1 Boundary-edge)
		              triangle: new-Triangle))
	          (if (Boundary-edge? edge-2)
	              (modify (edge-2 Boundary-edge)
			      triangle: new-Triangle))
	          (if (Boundary-edge? edge-3)
	              (modify (edge-3 Boundary-edge)
			      triangle: new-Triangle))
		  (loop (+ position 1) (append result (list new-Triangle))))
		(loop (+ position 1) result)))))))

(define (Delaunay-Triangulation threshold-angle polygon)
  (super-polygon->Triangulation (delaunay-triangulation threshold-angle polygon)))
    
