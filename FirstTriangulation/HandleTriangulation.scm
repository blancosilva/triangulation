(define (write-info chain)
  (let loop ((position 0))
    (if (> (/ (vector-length chain) 6) position)
	(let ((x1 (vector-ref chain (* 6 position)))
	      (y1 (vector-ref chain (+ 1 (* 6 position))))
	      (x2 (vector-ref chain (+ 2 (* 6 position))))
	      (y2 (vector-ref chain (+ 3 (* 6 position))))
	      (x3 (vector-ref chain (+ 4 (* 6 position))))
	      (y3 (vector-ref chain (+ 5 (* 6 position)))))
	  (begin
	    (newline)
	    (display x1) (display " ") (display y1) (newline)
	    (display x2) (display " ") (display y2) (newline)
	    (display x3) (display " ") (display y3) (newline)
	    (display x1) (display " ") (display y1) (newline)
	    (loop (+ position 1)))))))

(define (write-polygon-info polygon)
  (let* ((start (car polygon))
	 (x0 (point-x start))
	 (y0 (point-y start)))
    (let loop ((vertices polygon))
      (let* ((vertex (car vertices))
	     (x1 (point-x vertex))
	     (y1 (point-y vertex)))
	(newline)(display x1)(display " ")(display y1)
	(if (= (length vertices) 1)
	    (begin (newline)(display x0)(display " ")(display y0))
	    (loop (cdr vertices)))))))

(define (write-script xmin xmax ymin ymax)
  (let ((delta (/ (max (- xmax xmin) (* 3 0.5 (- ymax ymin))) 2.0))
	(xcenter (/ (+ xmax xmin) 2.0)))
    (display "set terminal postscript landscape\n")
    (display "plot [")(display (- xcenter delta))(display ":")(display (+ xcenter delta))
    (display "][")    (display ymin)(display ":")(display ymax)
    (display "] \"polygon.gnu\" w l lw 4, \"triangulation.gnu\" w l\nquit")))

(define (write-to-file triangulation polygon)
  (let loop ((position 0) (vector (make-vector (* 6 (vector-length triangulation))))
	     (xmin 0) (xmax 0) (ymin 0) (ymax 0))
    (if (= (vector-length triangulation) position)
	(begin
	  (with-output-to-file "triangulation.gnu" (lambda () (write-info vector)))
	  (with-output-to-file "triangulation.script" (lambda () (write-script xmin xmax ymin ymax)))
	  (with-output-to-file "polygon.gnu" (lambda () (write-polygon-info polygon))))
	(let* ((triangle (vector-ref triangulation position))
	       (vertex-1 (triangle-vertex-1 triangle))
	       (vertex-2 (triangle-vertex-2 triangle))
	       (vertex-3 (triangle-vertex-3 triangle))
	       (x1 (point-x vertex-1))
	       (y1 (point-y vertex-1))
	       (x2 (point-x vertex-2))
	       (y2 (point-y vertex-2))
	       (x3 (point-x vertex-3))
	       (y3 (point-y vertex-3)))
	  (begin
	    (vector-set! vector (* 6 position) x1)
	    (vector-set! vector (+ (* 6 position) 1) y1)
	    (vector-set! vector (+ (* 6 position) 2) x2)
	    (vector-set! vector (+ (* 6 position) 3) y2)
	    (vector-set! vector (+ (* 6 position) 4) x3)
	    (vector-set! vector (+ (* 6 position) 5) y3)
	    (loop (+ position 1) vector
		  (min xmin x1 x2 x3) (max xmax x1 x2 x3) 
		  (min ymin y1 y2 y3) (max ymax y1 y2 y3)))))))

(define (nicer-triangulation super-polygon)
  (let ((triangulation (super-polygon-triangulation super-polygon))
	(segments (super-polygon-segments super-polygon)))
    (let loop ((position 0) (result '()))
      (if (= position (vector-length triangulation))
	  (list->vector result)
	  (let* ((triangle (vector-ref triangulation position))
		 (v1 (triangle-vertex-1 triangle))
		 (v2 (triangle-vertex-2 triangle))
		 (v3 (triangle-vertex-3 triangle)))
	    (if (is-inner-triangle? triangle segments)
		(loop (+ position 1) (append result (list triangle)))
		(loop (+ position 1) result)))))))

(define (display-nicer-triangulation super-polygon)
  (let ((triangulation (super-polygon-triangulation super-polygon))
	(segments      (super-polygon-segments super-polygon)))
    (let loop ((position 0))
      (if (= (vector-length triangulation) position)
	  (newline)
	  (let* ((triangle (vector-ref triangulation position))
		 (vertex-1 (triangle-vertex-1 triangle))
		 (vertex-2 (triangle-vertex-2 triangle))
		 (vertex-3 (triangle-vertex-3 triangle)))
	    (if (is-inner-triangle? triangle segments)
		(begin
		  (newline)
		  (display "Triangle #")
		  (display position)
		  (newline)
		  (display "\t vertex-1: ")
		  (display (point-name (triangle-vertex-1 triangle)))
		  (display "\t vertex-2: ")
		  (display (point-name (triangle-vertex-2 triangle)))
		  (display "\t vertex-3: ")
		  (display (point-name (triangle-vertex-3 triangle)))
		  (display "\t pointers: ")
		  (display (list (triangle-ptriangle-1-2 triangle)
				 (triangle-ptriangle-2-3 triangle)
				 (triangle-ptriangle-3-1 triangle)))
		  (loop (+ position 1)))
		(loop (+ position 1))))))))

(define (display-triangulation super-polygon)
  (let ((triangulation (super-polygon-triangulation super-polygon)))
    (let loop ((position 0))
      (if (= (vector-length triangulation) position)
	  (newline)
	  (let ((triangle (vector-ref triangulation position)))
	    (begin
	      (newline)
	      (display "Triangle #")
	      (display position)
	      (newline)
	      (display "\t vertex-1: ")
	      (display (point-name (triangle-vertex-1 triangle)))
	      (display "\t vertex-2: ")
	      (display (point-name (triangle-vertex-2 triangle)))
	      (display "\t vertex-3: ")
	      (display (point-name (triangle-vertex-3 triangle)))
	      (display "\t pointers: ")
	      (display (list (triangle-ptriangle-1-2 triangle)
			     (triangle-ptriangle-2-3 triangle)
			     (triangle-ptriangle-3-1 triangle)))
	      (loop (+ position 1))))))))

(define (display-segments segments-vector)
  (let loop ((position 0))
    (if (= (vector-length segments-vector) position)
	(newline)
	(let ((segment (vector-ref segments-vector position)))
	  (display "Segment #")(display position)(display ":  [")
	  (display (point-name (car segment)))(display "-")
	  (display (point-name (cadr segment)))(display "]\t")
	  (display "[(")(display (point-x (car segment)))
	  (display ",") (display (point-y (car segment)))
	  (display ")--->(")(display (point-x (cadr segment)))
	  (display ",") (display (point-y (cadr segment)))
	  (display ")]\n")
	  (loop (+ position 1))))))

(define (display-triangle triangle)
  (let* ((vertex-1 (triangle-vertex-1 triangle))
	 (vertex-2 (triangle-vertex-2 triangle))
	 (vertex-3 (triangle-vertex-3 triangle)))
    (display "Vertex-1: ")(display (point-name vertex-1))(display "\t[")(display (point-x vertex-1))
    (display ",")(display (point-y vertex-1))(display "]\n")
    (display "Vertex-2: ")(display (point-name vertex-2))(display "\t[")(display (point-x vertex-2))
    (display ",")(display (point-y vertex-2))(display "]\n")
    (display "Vertex-3: ")(display (point-name vertex-3))(display "\t[")(display (point-x vertex-3))
    (display ",")(display (point-y vertex-3))(display "]\n")))

(define (convex-polygon sides)
  (let loop ((position 0) (result '()))
    (if (= position sides)
	result
	(loop (+ position 1) 
	      (append result (list (make-point (+ 0.1 (* 10.0 (cos (* 2 pi position (/ 1.0 sides)))))
					       (+ 0.1 (* 10.0 (sin (* 2 pi position (/ 1.0 sides)))))
					       position)))))))

(define (output-convex sides threshold-angle)
  (write-to-file (nicer-triangulation (delaunay-triangulation threshold-angle (convex-polygon sides))) 
		 (convex-polygon sides)))

(define (output polygon threshold-angle)
  (write-to-file (nicer-triangulation (delaunay-triangulation threshold-angle polygon)) polygon))
