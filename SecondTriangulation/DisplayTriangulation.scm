(define (display-point point)
  (display "POINT: ")
  (display (point-name point))
  (display " = ( ")
  (display (point-x point))
  (display ", ")
  (display (point-y point))
  (display ")\n"))

(define (display-segment segment)
  (display "SEGMT: [ ( ")
  (display (point-x (segment-point-1 segment)))
  (display ", ")
  (display (point-y (segment-point-1 segment)))
  (display ")---( ")
  (display (point-x (segment-point-2 segment)))
  (display ", ")
  (display (point-y (segment-point-2 segment)))
  (display ") ]\n"))

(define (display-triangle triangle)
  (display "TRNGL:\t")
  (display "vertex-1: ")
  (display (point-name (triangle-vertex-1 triangle)))
  (display "\tvertex-2: ")
  (display (point-name (triangle-vertex-2 triangle)))
  (display " \tvertex-3: ")
  (display (point-name (triangle-vertex-3 triangle)))
  (display "\tpointers: ")
  (display (list (triangle-ptriangle-1-2 triangle)
		 (triangle-ptriangle-2-3 triangle)
		 (triangle-ptriangle-3-1 triangle)))
  (newline))

(define (display-triangulation triangulation)
  (if (vector? triangulation) 
    (let loop ((position 0)) 
      (if (= position (vector-length triangulation)) 
	(newline) 
	(begin 
	  (display (+ position 1))
	  (display " ")
	  (display-triangle (vector-ref triangulation position)) 
	  (loop (+ position 1)))))
    (display-triangulation 
      (super-polygon-triangulation triangulation))))

(define (write-polygon polygon)
  (let ((first-vertex (vector-ref polygon 0)))
    (let loop ((position 0))
      (if (= position (vector-length polygon))
	(begin 
	  (display (point-x first-vertex)) 
	  (display " ") 
	  (display (point-y first-vertex)))
	(begin
	  (display (point-x (vector-ref polygon position)))
	  (display " ")
	  (display (point-y (vector-ref polygon position)))
	  (newline)
	  (loop (+ position 1)))))))

(define (write-triangulation super-polygon)
  (let* ((triangulation (super-polygon-triangulation super-polygon))
	 (segments (super-polygon-segments super-polygon))
	 (polygon (segments->polygon segments)))
  (let loop ((position 0))
    (if (= position (vector-length triangulation))
      (newline)
      (if (is-inner-triangle?
	    (vector-ref triangulation position) polygon) 
	(let ((vertex-1 
		(triangle-vertex-1 
		  (vector-ref triangulation position))) 
	      (vertex-2 
		(triangle-vertex-2 
		  (vector-ref triangulation position))) 
	      (vertex-3 
		(triangle-vertex-3 
		  (vector-ref triangulation position)))) 
	  (display (point-x vertex-1)) 
	  (display " ") 
	  (display (point-y vertex-1)) 
	  (newline) 
	  (display (point-x vertex-2)) 
	  (display " ") 
	  (display (point-y vertex-2)) 
	  (newline) 
	  (display (point-x vertex-3)) 
	  (display " ") 
	  (display (point-y vertex-3)) 
	  (newline) 
	  (display (point-x vertex-1)) 
	  (display " ") 
	  (display (point-y vertex-1)) 
	  (newline)(newline) 
	  (loop (+ position 1)))
	(loop (+ position 1)))))))

(define (polygon+angle->script polygon angle file-name)
  (let* ((limits (polygon-limits polygon))
	 (xmin (vector-ref limits 0))
	 (xmax (vector-ref limits 1))
	 (ymin (vector-ref limits 2))
	 (ymax (vector-ref limits 3))
         (delta (/ (max (- xmax xmin) (* 3 0.5 (- ymax ymin))) 2.0))
	 (xcenter (/ (+ xmax xmin) 2.0))
	 (super-polygon (delaunay-triangulation angle polygon)))
    (with-output-to-file 
      "polygon.gnu" (lambda () (write-polygon polygon))) 
    (with-output-to-file
      "triangulation.gnu" 
      (lambda () (write-triangulation super-polygon)))
    (with-output-to-file 
      file-name 
      (lambda ()
	(display "set terminal postscript\n")
	(display "plot [")
	(display (- xcenter delta))
	(display ":")
	(display (+ xcenter delta))
	(display "][")
	(display ymin)
	(display ":")
	(display ymax)
	(display "] \"polygon.gnu\" w l lw 4, ")
	(display "\"triangulation.gnu\" w l\nquit")))))

