(define (write-triangulation triangulation file)
  (with-output-to-file file (lambda () (write-data triangulation))))

(define (write-data triangulation)
  (do ((index (- (Dvector-length triangulation) 1) (- index 1)))
    ((< index 0) (newline))
    (let ((triangle (Dvector-ref triangulation index)))
      (if (triangle? triangle)
	(let ((vertex-1 (triangle-vertex-1 triangle))
	      (vertex-2 (triangle-vertex-2 triangle))
	      (vertex-3 (triangle-vertex-3 triangle)))
	  (display (point-x vertex-1)) (display " ")
	  (display (point-y vertex-1)) (newline)
	  (display (point-x vertex-2)) (display " ")
	  (display (point-y vertex-2)) (newline)
	  (display (point-x vertex-3)) (display " ")
	  (display (point-y vertex-3)) (newline)
	  (display (point-x vertex-1)) (display " ")
	  (display (point-y vertex-1)) (newline)(newline))))))

(define (display-triangulation triangulation)
  
  (define (display-triangle triangle index)
    (display "Triangle #")(display index)(display ":\n")
    (pp (triangle-vertex-1 triangle))
    (pp (triangle-vertex-2 triangle))
    (pp (triangle-vertex-3 triangle))
    (pp (triangle-segment-1 triangle))
    (pp (triangle-segment-2 triangle))
    (pp (triangle-segment-3 triangle))
    (display "pointing to triangles:\n")
    (display-sub-triangle (triangle-triangle-1 triangle))
    (display "\t----------\n")
    (display-sub-triangle (triangle-triangle-2 triangle))
    (display "\t----------\n")
    (display-sub-triangle (triangle-triangle-3 triangle))
    (display "\t----------\n"))
  
  (do ((index (- (collection-length triangulation) 1) (- index 1)))
    ((< index 0) (newline))
    (let ((triangle (collection-ref triangulation index)))
      (if (triangle? triangle)
	(display-triangle triangle index)
	(begin 
	  (display (list "Skip #" index ))
	  (newline))))))

(define (display-sub-triangle triangle)
  (if (triangle? triangle)
    (begin
      (pp (triangle-vertex-1 triangle))
      (pp (triangle-vertex-2 triangle))
      (pp (triangle-vertex-3 triangle)))
    (display "\t#f\n")))

(define a (delaunay-triangulation "PolyFiles/nasa.poly"))
(write-triangulation a "superior.gnu")
